---
layout: post
title: webpack性能优化
date: 2019-04-18 11:11:11.000000000 +09:00
categories: webpack性能优化
tags: webpack性能优化
---

**关键点**
### 一. webpack优化打包构建速度
优化打包构建速度, 对于开发体验和效率优化.

#### 1. babel-loader 优化
开启 cacheDirectory 缓存, 没有改动的代码会缓存, 不会重新编译. 在开发环境 [webpack.dev.js]:

```
module: {
  rules: [{
      test: /\.js$/,
      loader: ['babel-loader?cacheDirectory'],
      include: srcPath,
      exclude: /node_modules/
    },
  ]
}
```

#### 2. IgnorePlugin 规避引入未使用模块
IgnorePlugin 避免引入无用模块，减少了打包体积，提升了打包速度, 在开发环境 [webpack.prod.js] 配置:

```
plugins: [
  new webpack.IgnorePlugin(//, //),
] 
```

#### 3. noParse 避免重复打包
 module.noParse 字段，可以用于配置哪些模块文件的内容不需要进行解析, 不需要解析依赖（即无依赖） 的第三方大型类库等，可以通过这个字段来配置，以提高整体的构建速度.

#### 4. 多进程打包
* js是单线程，开启多线程打包，提高构建速度(特别是多核CPU). 第三方 HappyPack, thread-loader 等进行多进程处理;
* ParalleUglifyPlugin 多进程压缩JS, JS单线程， 开启多进程压缩更快,webpack 内置 Uglify工具压缩JS;

注意点: 进行取舍, 项目较大, 打包较慢, 开启多进程能提高速度; 项目较小, 打包很快, 开启多进程会降低速度(进程开销);

#### 5. 自动刷新/热更新
* 自动刷新运用于开发环境, watch: true, 默认为 false, 若开发环境开启 devserver,自动刷新便默认开启
* 引用 webpack 的插件 HotModuleReplacementPlugin

注意点: 自动刷新: 整个网页全部刷新, 速度较慢, 状态会丢失; 热更新: 新代码生效, 网页不刷新, 状态不丢失.

#### 6. DLLPlugin 动态链接库插件
1. DLLPlugin 将常用稳定不常更新的框架打包成dll文件，然后再引用, 这样减少每次都重新构建.

2. 如果项目上了 webpack 4，再使用 dll 收益并不大. 实际项目的代码试了一下，加入 dll 可能会有 1-2 s 的速度提升, 对于整体打包时间可以说可以忽略不计.

3. 推荐插件 HardSourceWebpackPlugin.

### 二. webpack性能优化
1. 懒加载 import
2. 提取公共代码
3. IgnorePlugin 避免引入无用模块
4. 小图片base64编码, 减少请求次数
5. bundle 加 hash
6. 使用 CDN 加速
7. 开启 production 模式, [mode: 'production'], webpack4.0+, 则: 自动开启代码压缩, 自动删除调试代码, 启动 Tree-Shaking.



